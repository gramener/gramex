variables:
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ""
  MYSQL_DATABASE: test_datahandler
  MYSQL_USER: root
  MYSQL_ALLOW_EMPTY_PASSWORD: "yes"

  # Define variables for nosetests pointing to the database servers
  # See http://doc.gitlab.com/ee/ci/docker/using_docker_images.html
  POSTGRES_SERVER: postgres
  MYSQL_SERVER: mysql
  REDIS_SERVER: redis

validate:
  only: [master, release]
  image: gramener/builderrors
  script: builderrors

test:
  # Image created by pkg/docker-gramex-pytest/
  image:
    name: gramener/gramex-pytest:latest
    pull_policy: always

  # Documentation on starting services:
  #   http://doc.gitlab.com/ce/ci/services/postgres.html
  #   http://doc.gitlab.com/ce/ci/services/mysql.html
  services:
    - postgres:latest
    - mysql:latest
    - redis:latest
    # TODO: elasticsearch
    # TODO: mongo
  only: [sa-pytest]
  script:
    - pip install -e .[test] --config-settings editable_mode=strict
    - gramex license accept
    # TODO: Remove in next release, since this line is moved into gramener/gramex Dockerfile
    - mkdir /home/gramex/.npm-packages/lib/
    - sh task _pytest

# Deploy the master / release branches on gramener.com
deploy-gramener:
  only: [master, release]
  script:
    - 'ssh ubuntu@gramener.com "
      cd /mnt/gramener/apps/gramex;
      git checkout -- .;
      git pull;
      export PATH=/mnt/gramener/anaconda3/bin/:$PATH;
      pip install -e . --config-settings editable_mode=strict;
      gramex setup --all;
      pip install --upgrade gramexenterprise;
      gramex license accept;
      rm -rf /mnt/gramener/apps/v1/gramex-update;
      cp -R /mnt/gramener/apps/gramex/gramex/apps/update /mnt/gramener/apps/v1/gramex-update;
      "'

# Deploy the master / release branches on uat.gramener.com
deploy-uat:
  only: [master, release]
  script:
    - 'ssh ubuntu@uat.gramener.com "
      cd ~/gramex;
      git checkout -- .;
      git pull;
      export PATH=/home/ubuntu/anaconda3/bin/:$PATH;
      pip install -e . --config-settings editable_mode=strict;
      gramex setup --all;
      pip install --upgrade gramexenterprise;
      gramex license accept;
      "'
