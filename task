#!/usr/bin/env bash

# Print each command as it is run
set -x

clean () {
  # Remove unnecessary / temporary files
  rm -rf build/ dist/ .eggs/
  rm -rf tests/uploads/ tests/htmlcov/ tests/.cache-url
  rm -rf gramex-1.*
  rm -f .coverage
  find . \( -name '*.egg-info' -o -name '*.egg' -o -name '*.pyc' -o -name '*.pyo' -o -name '__pycache__' \) -exec rm -fr {} +
}

lint () {
  # Python lint with flake8
  command -v flake8 2>/dev/null 2>&1 || pip install flake8 pep8-naming flake8-blind-except flake8-print flake8-debugger
  flake8 gramex testlib tests

  # Python security check with bandit
  command -v bandit 2>/dev/null 2>&1 || pip install bandit
  bandit . --recursive --quiet
}

test () {
  nosetests
  (cd tests/filemanager; npm install; npm test)
}

stats () {
  # Count number of lines of code
  PYLOC=`find gramex -name '*.py' ! -path '*/node_modules/*' | grep '\.py$' | xargs wc -l | tail -1`
  JSLOC=`find gramex -name '*.js' ! -path '*/node_modules/*' | grep '\.js$' | xargs wc -l | tail -1`
  TESTLOC=`find tests testlib -name '*.py' ! -path '*node_modules/*' | grep '\.py$' | xargs wc -l | tail -1`
  printf "Python: $PYLOC\nJavaScript: $JSLOC\nTests: $TESTLOC\n"
}

docs () {
  (cd mkdocs; mkdocs build)
}

pushdocs () {
  rsync -avzP mkdocs/api ubuntu@gramener.com:/mnt/gramener/apps/guide/
}

pushpypi () {
  clean
  python setup.py sdist
  # Note: if this fails, add '-p PASSWORD'
  twine upload -u gramener dist/*
}

pushcoverage () {
  rsync -avzP tests/htmlcov/ ubuntu@gramener.com:/mnt/gramener/demo.gramener.com/gramextestcoverage/
}

update () {
  find gramex/apps/ -maxdepth 2 -name package.json | xargs dirname | xargs -L1 bash -c 'cd "$0" && npm update && npm audit fix'
}

security () {
  bandit gramex --aggregate vuln --recursive --exclude '*/node_modules/*' > reports/bandit.txt
  freshclam
  clamscan --recursive --exclude-dir=.git --exclude-dir=__pycache__ --exclude-dir=mkdocs --exclude-dir=.eggs --exclude-dir=node_modules > reports/clamav.txt
  find gramex/apps/ -maxdepth 2 -name package.json | xargs dirname | xargs -L1 bash -c 'cd "$0" && npm audit --parseable || true' > reports/npm-audit.txt
  snyk test --dev --all-projects --skip-unresolved > reports/snyk.txt || true
}

conda () {
  # conda install conda-build
  conda build purge
  pip install orderedattrdict tornado==5.1.1
  python pkg/conda/conda-setup.py
  conda build -c conda-forge pkg/conda/
}

# Usage: VERSION=1.xx.0 bash task pushdocker
pushdocker () {
  VERSION=$VERSION bash pkg/docker-gramex-base/setup.sh
  VERSION=$VERSION bash pkg/docker-gramex/setup.sh
  # Run security checks
  docker pull aquasec/trivy:latest
  docker run --rm aquasec/trivy:latest \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /mnt/c/temp/trivycache:/root/.cache/
    --security-checks vuln \
    image gramener/gramex:$VERSION > reports/trivy.txt
  docker login                # log in as sanand0 / pratapvardhan
  docker push gramener/gramex-base:$VERSION
  docker push gramener/gramex-base:latest
  docker push gramener/gramex:$VERSION
  docker push gramener/gramex:latest
}

# Run all commands from the same folder as this script
cd "$(dirname "$0")"
# Run all commands
for cmd in "$@"; do
  "$cmd"
done
