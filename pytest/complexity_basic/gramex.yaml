# complexity_basic tests
url:
  config/json-error:
    priority: 1
    pattern: /$YAMLURL/json-error
    handler: FunctionHandler
    kwargs:
      function: str(1/0)
      methods: [GET, POST]
      ratelimit:
        keys: [daily, user]
        limit: 50
      error:
        500:
          function: >
            json.dumps({
              "code": status_code,
              "message": str(kwargs['exc_info'][1]),
              "traceback": ''.join(traceback.format_tb(kwargs['exc_info'][2])),
            }, indent=2)
          headers:
            Content-Type: application/json

  websockethandler/pingbot:
    pattern: /$YAMLURL/pingbot
    handler: WebSocketHandler
    kwargs:
      open: # When websocket is opened
        function: pingbot.open #   call open(handler) in pingbot.py
      on_message: # When client sends a message
        function: pingbot.on_message #   call on_message(handler, msg) in pingbot.py
      on_close: # When websocket is closed
        function: pingbot.on_close #   call on_close(handler) in pingbot.py
  proxyhandler/github/search/users:
    pattern: /$YAMLURL/github/(.*)
    handler: ProxyHandler
    kwargs:
      url: https://api.github.com/{0}
      request_headers:
        User-Agent: true
  nslookup-google:
    pattern: /$YAMLURL/nslookup-google # At this URL
    handler: ProcessHandler # run a process
    kwargs:
      args: nslookup www.google.com # The full command to run
      shell: true # using the shell
      buffer: line # Show the result line by line
      headers:
        Content-Type: text/x-plain # as a text file
  pptxhandler/ppt:
    pattern: /$YAMLURL/ppt
    handler: PPTXHandler
    kwargs:
      headers:
        Content-Disposition: attachment; filename=slide1.pptx
      data:
        sales: { url: $YAMLPATH/sales.csv }
      only: 2
      source: $YAMLPATH/examples-input.pptx # Input file to load
      change-text: # First rule is called change-text
        Title 1: #   Find all shapes named "Title 1" in all slides
          text: 'Total sales is {{ sales["sales"].sum() }}' # Replace text with data template
  openapi:
    pattern: /$YAMLURL/docs
    handler: OpenAPIHandler
    kwargs:
      info:
        title: Gramex Microservices
        description: >
          [Gramex](https://gramener.com/gramex/) OpenAPIHandler
        version: 0.1.2
      servers:
        - url: ..
          description: Gramex OpenAPIHandler demo
      urls: # List of url: keys to expose.
        - compare # Use '*' to match any string
        - flagdata
  mlpredictor-iris:
    pattern: /iris
    handler: MLPredictor
    kwargs:
      config_dir: $YAMLPATH
      data:
        url: iris.csv
      columns: [sepal_length, sepal_width, petal_length, petal_width]
      target_col: species
  mymodel:
    pattern: /$YAMLURL/model
    handler: MLHandler
    kwargs:
      config_dir: $YAMLPATH
  jsonhandler-data:
    pattern: /$YAMLURL/data/(.*)
    handler: JSONHandler
    kwargs:
      data:
        y: { a: 1, b: 2 }
        z: [1, 2, 3]
  filterhandler-flags:
    pattern: /$YAMLURL/flags
    handler: FilterHandler
    kwargs:
      url: $YAMLPATH/../formhandler/flags.csv
  facebookgraphhandler/facebook:
    pattern: /$YAMLURL/facebook/(.*)
    handler: FacebookGraphHandler
    kwargs:
      key: "xxx"
      secret: "xxx"
  twitterresthandler/twitter:
    pattern: /$YAMLURL/twitter/(.*)
    handler: TwitterRESTHandler
    kwargs:
      key: xxx
      secret: xxx
  drivedemo:
    pattern: /$YAMLURL/drivedemo
    handler: DriveHandler
    kwargs:
      path: $GRAMEXDATA/apps/guide/drive-data/ # ... save files here
  comichandler/comics:
    pattern: /$YAMLURL/comics
    handler: ComicHandler
  markdown:
    pattern: /$YAMLURL/(.*) # Any URL under the current gramex.yaml folder
    handler: FileHandler # uses this handler
    kwargs:
      path: $YAMLPATH # Serve files from this YAML file's directory
      default_filename: README.md # using README.md as default
      index: true # List files if README.md is missing
      transform:
        "*.md, *.markdown": # Any file matching .md or .markdown
          function: markdown.markdown(content, output_format='html5', extensions=['extra'])
          encoding: utf-8 # Read input file as UTF-8
          headers: #   Use these HTTP headers:
            Content-Type: text/html #     MIME type: text/html
  csv:
    pattern: /$YAMLURL/csv/
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/data.csv
  sqlite:
    pattern: /$YAMLURL/sqlite/
    handler: FormHandler
    kwargs:
      url: "sqlite:///$YAMLPATH/mydatabase.db"
      table: mytable
  mysql:
    pattern: /$YAMLURL/mysql/
    handler: FormHandler
    kwargs:
      url: "mysql+pymysql://root@localhost:3306/test_filter"
      table: test_filter
  postgres:
    pattern: /$YAMLURL/postgres/
    handler: FormHandler
    kwargs:
      url: "postgresql://postgres@localhost:5432/test_filter"
      table: test_filter

  auth/logout:
    pattern: /$YAMLURL/logout
    handler: LogoutHandler
    kwargs:
      log:
        fields:
          [
            session.id,
            current_user.email,
            request.remote_ip,
            request.headers.User-Agent,
          ]

  auth/simple:
    pattern: /$YAMLURL/simple
    handler: SimpleAuth
    kwargs: &simplekwargs
      template: $YAMLPATH/simple.html # This has the login form
      credentials:
        alpha: alpha # User: alpha has password: alpha
        beta: beta # Similarly for beta
      redirect:
        query: next
        header: Referer
        url: .

  auth/ajax:
    pattern: /$YAMLURL/ajax
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/ajax.html
      template: true

  auth/google:
    pattern: /$YAMLURL/google
    handler: GoogleAuth
    kwargs: &googlekwargs
      key: $GOOGLE_KEY
      secret: $GOOGLE_SECRET
      # Scope list: https://developers.google.com/identity/protocols/googlescopes
      scope:
        - https://www.googleapis.com/auth/contacts.readonly
        - https://www.googleapis.com/auth/gmail.readonly
        - https://www.googleapis.com/auth/calendar.readonly
        - https://www.googleapis.com/auth/drive.readonly
        - https://www.googleapis.com/auth/spreadsheets.readonly
        - https://www.googleapis.com/auth/cloud-translation
      extra_params:
        prompt: select_account
        access_type: offline
      log:
        fields:
          [
            session.id,
            current_user.email,
            request.remote_ip,
            request.headers.User-Agent,
          ]
      redirect:
        query: next
        header: Referer
        url: .

  auth/contacts:
    pattern: /$YAMLURL/contacts
    handler: FunctionHandler
    kwargs:
      function: authutil.contacts
      headers:
        Content-Type: application/json

  auth/facebook:
    pattern: /$YAMLURL/facebook
    handler: FacebookAuth
    kwargs:
      key: $FACEBOOK_KEY
      secret: $FACEBOOK_SECRET
      log:
        fields:
          [
            session.id,
            current_user.name,
            request.remote_ip,
            request.headers.User-Agent,
          ]
      redirect:
        query: next
        header: Referer
        url: .

  auth/twitter:
    pattern: /$YAMLURL/twitter
    handler: TwitterAuth
    kwargs:
      key: $TWITTER_KEY
      secret: $TWITTER_SECRET
      log:
        fields:
          [
            session.id,
            current_user.username,
            request.remote_ip,
            request.headers.User-Agent,
          ]
      redirect:
        query: next
        header: Referer
        url: .

  auth/ldap:
    pattern: /$YAMLURL/ldap # Map this URL
    handler: LDAPAuth # to the LDAP auth handler
    kwargs:
      template: $YAMLPATH/ldap.html # This has the login form
      host: ipa.demo1.freeipa.org # Server to connect to
      use_ssl: true # Whether to use SSL or not
      user: "uid={user},cn=users,cn=accounts,dc=demo1,dc=freeipa,dc=org"
      password: "{password}"
      log:
        fields:
          [
            session.id,
            current_user.dn,
            request.remote_ip,
            request.headers.User-Agent,
          ]
      action:
        function: ensure_single_session
      redirect:
        query: next
        header: Referer
        url: .
        external: true

  auth/ldap-bind:
    pattern: /$YAMLURL/ldap-bind # Map this URL
    handler: LDAPAuth # to the LDAP auth handler
    kwargs:
      template: $YAMLPATH/ldap.html # This has the login form
      host: ipa.demo1.freeipa.org # Server to connect to
      use_ssl: true # Whether to use SSL or not
      bind: # Bind to the server with this ID/password
        user: "uid=admin,cn=users,cn=accounts,dc=demo1,dc=freeipa,dc=org"
        password: "Secret123"
      search:
        base: "dc=demo1,dc=freeipa,dc=org" # Search within this domain
        filter: "(mail={user})" # by email ID, rather than uid
        password: "{password}" # Use the password field as password
      log:
        fields:
          [
            session.id,
            current_user.dn,
            request.remote_ip,
            request.headers.User-Agent,
          ]
      action:
        function: ensure_single_session
      redirect:
        query: next
        header: Referer
        url: .
        external: true

  auth/ldap2:
    pattern: /$YAMLURL/ldap2
    handler: LDAPAuth
    kwargs:
      template: $YAMLPATH/ldap.html
      host: ldap.forumsys.com
      use_ssl: false
      user: "uid={user},dc=example,dc=com"
      password: "{password}"
      redirect:
        query: next
        header: Referer
        url: .
        external: true

  auth/dbsimple:
    pattern: /$YAMLURL/dbsimple # Map this URL
    handler: DBAuth # to the DBAuth handler
    kwargs:
      url: $USER_DATABASE_EXCEL
      user:
        column: $USER_DATABASE_USERCOLUMN
      password:
        column: $USER_DATABASE_PASSWORDCOLUMN
        function: passlib.hash.sha256_crypt.encrypt(content, salt="$USER_DATABASE_SALT")
      rules:
        url: $YAMLPATH/rules.csv
      redirect:
        query: next
        header: Referer
        url: .

  auth/db:
    pattern: /$YAMLURL/db
    handler: DBAuth
    kwargs:
      # This is created by schedule.create-user-database
      url: $USER_DATABASE_URL
      table: $USER_DATABASE_TABLE
      template: $YAMLPATH/db.html
      user:
        column: $USER_DATABASE_USERCOLUMN
        arg: user
      password:
        column: $USER_DATABASE_PASSWORDCOLUMN
        arg: password
        function: passlib.hash.sha256_crypt.encrypt(content, salt="$USER_DATABASE_SALT")
      forgot:
        email_from: gramex-guide-auth # Name of the email service to use for sending emails
        key: forgot # ?forgot= is used as the forgot password parameter
        arg: email # ?email= is used to submit the email ID of the user
        minutes_to_expiry: 15 # Minutes after which the link will expire
        email_column: email # The database column that contains the email ID
        email_subject: Gramex forgot password # Subject of the email
        email_as: "Gramex Guide <gramex.guide@gmail.com>" # Emails will be sent as if from this ID
        email_text: |
          This is an email from Gramex guide.
          You clicked on the forgot password like for user {user}.
          Visit this link to reset the password: {reset_url}
      signup:
        true
        # key: signup
        # validate: authutil.signup_validate(handler, args)
      redirect:
        query: next
        header: Referer
        url: .

  auth/user:
    pattern: /$YAMLURL/user
    handler: FunctionHandler
    kwargs:
      function: json.dumps(handler.session['user'])
      kwargs:
        indent: 4
      headers:
        Content-Type: application/json

  auth/session:
    pattern: /$YAMLURL/session
    handler: FunctionHandler
    kwargs:
      function: authutil.store_value
      headers:
        Content-Type: application/json

  auth/must-login:
    pattern: /$YAMLURL/must-login
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/secret.html
      auth: true

  auth/dotcom:
    pattern: /$YAMLURL/dotcom
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/secret.html
      auth:
        condition: # Allow only if condition is true
          function: handler.current_user.email.endswith('.com')
  auth/dotorg:
    pattern: /$YAMLURL/dotorg
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/secret.html
      auth:
        condition: # Allow only if condition is true
          function: handler.current_user.email.endswith('.org')

  auth/en-male:
    pattern: /$YAMLURL/en-male
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/secret.html
      auth:
        membership: # The following user object keys must match
          gender: male # user.gender must be male
          locale: [en, es] # user.locale must be en or es

  auth/use-simple:
    pattern: /$YAMLURL/use-simple
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/secret.html
      auth:
        login_url: ./simple

  auth/expiry:
    pattern: /$YAMLURL/expiry
    handler: SimpleAuth
    kwargs:
      session_expiry: 0.0003 # Session expires in 26 seconds
      credentials: { alpha: alpha }
      template: $YAMLPATH/expiry.html # Use this login template for the demo
      redirect: .

  auth/inactive:
    pattern: /$YAMLURL/inactive
    handler: SimpleAuth
    kwargs:
      session_inactive: 0.00003 # Must visit every 2.6 seconds
      credentials: { alpha: alpha }
      template: $YAMLPATH/inactive.html # Use this login template for the demo
      redirect: .

  auth/customexpiry:
    pattern: /$YAMLURL/customexpiry
    handler: SimpleAuth
    kwargs:
      session_expiry:
        default: 1 # the default session expiry is set to 1 day
        key: remember # When ?remember= is submitted on login
        values: # if ?remember=...
          sec: 0.000115 # 10 seconds
          min: 0.0007 # 60.48 seconds
          day: 1 # ...day, it expires in 1 day
          week: 7 # ...week, it expires in 7 days
          month: 31 # ...month, it expires in 31 days
          session: false # session cookie
          "on": 31 # If ?remember=on, expire after 31 days (checkbox)
      credentials: { alpha: alpha, beta: beta }
      template: $YAMLPATH/customexpiry.html # Use this login template for the demo
      redirect: .

  auth/otp:
    pattern: /$YAMLURL/otp
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/otp.html
      template: true
      headers:
        Cache-Control: no-cache

  auth/apikey:
    pattern: /$YAMLURL/apikey
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/apikey.html
      template: true
      headers:
        Cache-Control: no-cache

  auth/methods:
    pattern: /$YAMLURL/methods
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/methods.html
      template: true

  public-read:
    pattern: /$YAMLURL/public-read
    handler: FunctionHandler
    kwargs:
      function: f'Method = $${handler.request.method}, User = $${handler.current_user}'
      auth:
        methods: [POST, PUT, DELETE]
      xsrf_cookies: false

  auth/unauthorized-template:
    pattern: /$YAMLURL/unauthorized-template
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/secret.html
      auth:
        membership: # Pick an unlikely condition to test template
          donkey: king # This condition will usually be false
        template: $YAMLPATH/403-template.html # Render template for forbidden users

  auth/gitlab:
    pattern: /$YAMLURL/gitlab
    handler: OAuth2
    kwargs:
      client_id: $GITLAB_KEY
      client_secret: $GITLAB_SECRET
      authorize:
        url: "https://code.gramener.com/oauth/authorize"
      access_token:
        url: "https://code.gramener.com/oauth/token"
        body:
          grant_type: "authorization_code"
      user_info:
        url: "https://code.gramener.com/api/v4/user"
        headers:
          Authorization: "Bearer {access_token}"
      redirect:
        query: next
        header: Referer
        url: .

  auth/github:
    pattern: /$YAMLURL/github
    handler: OAuth2
    kwargs:
      client_id: $GITHUB_KEY
      client_secret: $GITHUB_SECRET
      authorize:
        url: https://github.com/login/oauth/authorize
        scope: [repo, gist, user]
      access_token:
        url: https://github.com/login/oauth/access_token
      user_info:
        url: https://api.github.com/user
        headers:
          Authorization: "token {access_token}"
        redirect:
          query: next
          header: Referer
          url: .

  auth/googleoauth2:
    pattern: /$YAMLURL/googleoauth2
    handler: OAuth2
    kwargs:
      client_id: 817932882244-gdr59t3mpqh5554d1bgdjuh38g6a7ahh.apps.googleusercontent.com
      client_secret: lwArXkw21KCqDPuJrel-WeQO
      authorize:
        url: https://accounts.google.com/o/oauth2/auth
        scope:
          - profile
          - email
      access_token:
        url: https://accounts.google.com/o/oauth2/token
        body:
          grant_type: authorization_code
      user_info:
        url: https://www.googleapis.com/oauth2/v1/userinfo
        headers:
          Authorization: "Bearer {access_token}"

  auth/lookup-attributes:
    pattern: /$YAMLURL/lookup-attributes
    handler: SimpleAuth
    kwargs:
      template: $YAMLPATH/simple.html
      credentials:
        alpha: alpha
        beta: beta
      lookup:
        url: $YAMLPATH/lookup.xlsx # Add attributes from Excel file
        id: user # by lookup up the 'id' in the 'user' column
      redirect:
        query: next
        header: Referer
        url: .
  auth/rules:
    pattern: /$YAMLURL/attr-rules
    handler: SimpleAuth
    kwargs:
      template: $YAMLPATH/simple.rules.html
      credentials:
        alpha:
          password: alpha
          email: jane.doe@gramener.com
          role: admin
          location: BLR
        beta:
          password: beta
          email: john.doe@gmail.com
          role: intern
          location: MUM
      rules:
        url: $YAMLPATH/rules.csv
      redirect:
        url: /$YAMLURL/attr-rules

  auth/rules-csv:
    pattern: /$YAMLURL/attr-rules-data
    handler: FormHandler
    kwargs:
      url: $YAMLPATH/rules.csv

  auth/recaptcha:
    pattern: /$YAMLURL/recaptcha
    handler: SimpleAuth
    kwargs:
      template: $YAMLPATH/simple.html
      # https://www.google.com/recaptcha/admin/site/344898552/settings
      recaptcha:
        key: 6Lf4u44UAAAAAFUEab2QNmEpbdFswIsB887aZwmQ
        # Normally, you would not publish the secret if the repo is public.
        # But this reCAPTCHA key only works on gramener.com and localhost.
        secret: 6Lf4u44UAAAAAEgK-Qt5LRZKnzFDZkFSwztC1LWM
      credentials:
        alpha: alpha
        beta: beta
      redirect:
        query: next
        header: Referer
        url: .

  auth/sms:
    pattern: /$YAMLURL/sms
    handler: SMSAuth
    kwargs:
      service: exotel
      message: "This is a test message being sent using Exotel with a (%s) and (00000). If this is being abused, report to 08088919888"
      redirect:
        query: next
        header: Referer
        url: .

  auth/email:
    pattern: /$YAMLURL/email
    handler: EmailAuth
    kwargs:
      service: gramex-guide-auth
      subject: "OTP for Gramex Guide"
      body: |
        The OTP for {user} is {password}

        Visit {link}
      html: |
        <p>The OTP for {user} is {password}.</p>
        <p><a href="{link}">Click here to log in</a></p>
      redirect:
        query: next
        header: Referer
        url: .

  auth/emailtemplate:
    pattern: /$YAMLURL/emailtemplate
    handler: EmailAuth
    kwargs:
      service: gramex-guide-auth
      subject: "OTP for Gramex Guide"
      bodyfile: $YAMLURL/emailauth.txt
      htmlfile: $YAMLURL/emailauth.html
      template: $YAMLURL/emailauth.template.html
      redirect:
        query: next
        header: Referer
        url: .

  auth/delay:
    pattern: /$YAMLURL/delay
    handler: SimpleAuth
    kwargs:
      <<: *simplekwargs
      delay: 5

  auth/multi:
    pattern: /$YAMLURL/multi
    handler: FileHandler
    kwargs:
      path: $YAMLPATH/multi.html
      template: true
      headers:
        Cache-Control: no-cache

  # Like auth/google, but user info is in handler.session.google_user, not handler.session.user
  auth/multi-google:
    pattern: /$YAMLURL/multi-google
    handler: GoogleAuth
    kwargs:
      user_key: google_user
      <<: *googlekwargs

  # Like auth/simple, but user info is in handler.session.simple_user, not handler.session.user
  auth/multi-simple:
    pattern: /$YAMLURL/multi-simple
    handler: SimpleAuth
    kwargs:
      user_key: simple_user
      <<: *simplekwargs

  auth/multi-unlink:
    pattern: /$YAMLURL/multi-unlink
    handler: FunctionHandler
    kwargs:
      function: '{key: handler.session.pop(key, None) for key in ["google_user", "simple_user"]}'
      redirect:
        url: ./multi

  random-function:
    pattern: /$YAMLURL/random
    handler: FunctionHandler
    kwargs:
      function:
        - random.seed(0)
        - random.randint(0, 100)

  capturehandler-capture:
    pattern: /$YAMLURL/capture
    handler: CaptureHandler
    kwargs:
      engine: chrome
      port: 9900

schedule:
  create-user-database:
    function: authutil.create_user_database # Run this function
    kwargs: # Pass the following parameters
      url: $USER_DATABASE_URL
      table: $USER_DATABASE_TABLE
      user: $USER_DATABASE_USERCOLUMN
      password: $USER_DATABASE_PASSWORDCOLUMN
      salt: $USER_DATABASE_SALT
      excel: $USER_DATABASE_EXCEL
    startup: true

import:
  auth/apps:
    path: "*/gramex.yaml"
    namespace: [url, schedule, cache, import]

email:
  gramex-guide-auth:
    type: gmail
    email: gramex.guide@gmail.com # Generic email ID used to test e-mails
    password: tlpmupxnhucitpte # App-specific password created for Gramex guide

sms:
  exotel:
    # See https://my.exotel.com/gramener2/settings/site#api-settings
    type: exotel
    sid: gramener2
    token: 13f359bf07b9882cea149547960a11536e2a3ad6

alert:
  alert-schedule:
    days: "*" # Send email every day
    hours: "6, 12" # at 6am and 12noon
    minutes: 0 # at the 0th minute, i.e. 6:00am and 12:00pm
    utc: true # GMT (or UTC). Set false for local server time
    to: admin@example.org
    subject: Scheduled alert
    body: This email will be scheduled and sent as long as Gramex is running.

watch: # Define files to watch
  data-files: # Create a watched named data-files
    paths: # Watch for these files
      - data.xslx # - data.xlsx from where Gramex was started
    on_modified: module.function # When file is changed, call module.function(event)
