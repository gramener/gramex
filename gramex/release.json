{
  "#1": "This file has setup details for Gramex.",
  "#2": "We had to use JSON, not YAML. setup.py requires standard libraries (no YAML).",
  "#3": "Keys with '#' are comments. (JSON doesn't support comments.)",
  "info#": "Release info for setup.py to package on PyPI, and gramex/__init__.py for version info",
  "info": {
    "name": "gramex",
    "version": "1.85.0",
    "description": "Gramex: Low Code Data Solutions Platform",
    "author": "Gramener",
    "author_email": "s.anand@gramener.com",
    "url": "https://gramener.com/gramex/",
    "download_url": "https://github.com/gramener/gramex",
    "license": "MIT",
    "keywords": "gramex",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ]
  },
  "console#": "Command-line scripts provided by Gramex",
  "console": [
    "gramex = gramex:commandline",
    "secrets = gramex.secrets:commandline",
    "slidesense = gramex.pptgen2:commandline"
  ],
  "lib#1": "Libraries required for Gramex. Keep in sync with guide/license/thirdparty.md",
  "lib#2": "REQ: required packages for Gramex",
  "lib#3": "SRV: required for specific services",
  "lib#4": "OPT: optional packages. Not required for startup, but for optional libraries",
  "lib": {
    "argh>=0.24.1": "REQ: dependency for watchdog",
    "astor": "REQ: dependency for gramex.transforms.build_transform",
    "cachetools>=3.0.0": "SRV: services.cache for memory cache",
    "colorama": "REQ: gramex.init()",
    "colorlog>=2.7.0": "REQ: Coloured log files",
    "cron-descriptor": "OPT: admin/schedule to pretty-print cron",
    "crontab>=0.21": "SRV: services.schedule to parse crontab entries",
    "diskcache>=2.8.3": "SRV: services.cache for disk cache",
    "h5py": "REQ: MLHandler saves .h5 files. OPT: gramex.cache.HDF5Store",
    "joblib": "OPT: For gramex.ml",
    "lxml": "OPT: gramex.pptgen",
    "markdown": "OPT: transforms, gramex.services.create_alert()",
    "matplotlib": "OPT: gramex.data.download()",
    "numpy": "REQ: for Pandas. See pandas/issues/39520",
    "oauthlib>=1.1.2": "SRV: OAuth request-signing",
    "openpyxl": "REQ: PPTXhandler charts",
    "orderedattrdict>=1.6.0": "REQ: OrderedDict with attr access for configs",
    "packaging": "REQ: parse versions",
    "pandas": "REQ: gramex.data",
    "passlib>=1.6.5": "REQ: password storage (e.g. in handlers.DBAuth)",
    "pathtools>=0.1.1": "REQ: dependency for watchdog",
    "psutil": "REQ: monitor process",
    "pymysql": "OPT: MySQL connections",
    "python-pptx>=0.6.6,<=0.6.19": "SRV: pptgen. See https://github.com/scanny/python-pptx/issues/754",
    "python-slugify": "REQ: Pre-defined slugs at gramex.config.slug",
    "pyyaml>=5.1": "REQ: Parse YAML files for config",
    "redis>=2.10.0": "SRV: RedisStore",
    "requests": "REQ: HTTP library for python",
    "scikit-learn>=0.23.2,<1.0": "OPT: For gramex.ml",
    "seaborn": "OPT: gramex.data.download()",
    "setuptools>=16.0": "REQ: 16.0 has good error message support",
    "shutilwhich>=1.1.0": "REQ: shutil.which backport",
    "six": "REQ: Python 3 compatibility",
    "sqlalchemy": "REQ: gramex.data.filter()",
    "sqlitedict>=1.5.0": "SRV: SQLiteStore",
    "tables": "REQ: HDF5 reading / writing",
    "tornado>=5.1.1": "REQ: Web server",
    "tzlocal": "TODO: Why is this required?",
    "watchdog>=0.8": "REQ: Monitor file changes",
    "xlrd": "REQ: gramex.data.download()"
  },
  "conda#": "Packages that can only be installed via conda on Windows, not via pip",
  "conda": {
    "line_profiler": "OPT: conda: For gramex.debug"
  }
}
